# -*- coding: utf-8 -*-
"""lab_2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1etrWGCfBjY4irzBnU3Hi3SZCwdeJ5XbT

# Code before activites
"""

# Creating a List
List = []
print("Blank List: ")
print(List)
# Creating a List of numbers
List = [10, 20, 14]
print("\nList of numbers: ")
print(List)
# Creating a List of strings and accessing
# using index
List = ["Geeks", "For", "Geeks"]
print("\nList Items: ")
print(List[0])
print(List[2])
# Creating a Multi-Dimensional List
# (By Nesting a list inside a List)
List = [['Geeks', 'For'], ['Geeks']]
print("\nMulti-Dimensional List: ")
print(List)

List = [1, 2, 4, 4, 3, 3, 3, 6, 5]
print("\nList with the use of Numbers: ")
print(List)
# Creating a List with
# mixed type of values
# (Having numbers and strings)
List = [1, 2, 'Geeks', 4, 'For', 6, 'Geeks']
print("\nList with the use of Mixed Values: ")
print(List)

# Creating a List of numbers
List2 = [10, 20, 14]
print(len(List2))

# Creating a List
List = []
print("Initial blank List: ")
print(List)
# Addition of Elements
# in the List
List.append(1)
List.append(2)
List.append(4)
print("\nList after Addition of Three elements: ")
print(List)
# Adding elements to the List
# using Iterator
for i in range(1, 4):
 List.append(i)
print("\nList after Addition of elements from 1-3: ")
print(List)
# Adding Tuples to the List
List.append((5, 6))
print("\nList after Addition of a Tuple: ")

print(List)
# Addition of List to a List
List2 = ['For', 'Geeks']
List.append(List2)
print("\nList after Addition of a List: ")
print(List)

# Creating a List
List = [1,2,3,4]
print("Initial List: ")
print(List)
# Addition of Element at
# specific Position
# (using Insert Method)
List.insert(3, 12)
List.insert(0, 'Geeks')
print("\nList after performing Insert Operation: ")
print(List)

# Creating a List
List = [1, 2, 3, 4]
print("Initial List: ")
print(List)
# Addition of multiple elements
# to the List at the end
# (using Extend Method)
List.extend([8, 'Geeks', 'Always'])
print("\nList after performing Extend Operation: ")
print(List)

# Creating a List with
# the use of multiple values
List = ["Geeks", "For", "Geeks"]
20
# accessing a element from the
# list using index number
print("Accessing a element from the list")
print(List[0])
print(List[2])
# Creating a Multi-Dimensional List
# (By Nesting a list inside a List)
List = [['Geeks', 'For'], ['Geeks']]
# accessing an element from the
# Multi-Dimensional List using
# index number
print("Accessing a element from a Multi-Dimensional list")
print(List[0][1])
print(List[1][0])

"""# Activity 1

"""

list1 = []
list2 = []

for i in range(1,6):
  listInput = int(input("Enter the number to list 1 : "))
  list1.append(listInput)

for i in range(1,6):
   listInput = int(input("Enter the number to list 2 : "))
   list2.append(listInput)

list3 = list1 + list2

print(list3)

"""#Activity 2

"""

def palindrome(word):
  temp = word[::-1]
  if(word.capitalize() == temp.capitalize()):
    return True
  else:
    return False

print(palindrome('daad'))

"""# Activity 3

"""

a = [[1, 0, 0], [0, 1, 0], [0, 0, 1] ]
b = [[1, 2, 3], [4, 5, 6], [7, 8, 9] ]
c = []

for indrow in range(3):
  c.append([])
  for indcol in range(3):
    c[indrow].append(0)
    for indaux in range(3):
      c[indrow][indcol] += a[indrow][indcol] * b[indrow][indcol]

print(c)

"""#Activity 4

"""

def perimeter(listing):
  leng = len(listing)
  perimeter = 0
  for i in range(0, leng-1):
    dist = (((listing[i][0]-listing[i+1][0])**2)+
            ((listing[i][1]-listing[i+1][1])**2))**0.5
    perimeter = perimeter + dist
    perimeter = perimeter + (((listing[0][0]-listing[leng-1][0])**2) +
                             ((listing[0][1]-listing[leng-1][1])**2)) ** 0.5

    return perimeter

L = [(1,3),(2,7),(3,9),(-1,9)]
print(perimeter(L))

"""#Activity 5

"""

set1 = {0,1,2,4,5}
set2 = {4,5,7,8,9}
set3 = set()

for i in set1:
  if i not in set2:
    set3.add(i)

for i in set2:
  if i not in set1:
    set3.add(i)

print(set3)

"""#Activity 6

"""

details = {("sohail","khan"):"03314567123", ("Hamza","Ali"):"03223456124", ("Ahmed","Ali"): "03211234561"}

firstName = input("Enter first name : ")
secondName = input("Enter second name : ")

search = (firstName,secondName)
if search in details:
  print(details[search])
else:
  print("Name does not found")

"""# Lab task 1

"""

list1 = []
list2 = []

while(True):
  num = input("Enter the value to add in list 1 or exit to terminate : ")
  if(num == 'exit'):
    break
  list1.append(int(num))

while(True):
  num = input("Enter the value to add in list 2 or exit to terminate : ")
  if(num == 'exit'):
    break
  list2.append(int(num))

list3 = list1 + list2
list3.sort()
print(list3)

"""# Lab task 2

"""

list1 = []
list2 = []

while(True):
  num = input("Enter the value to add in list 1 or exit to terminate : ")
  if(num == 'exit'):
    break
  list1.append(int(num))

while(True):
  num = input("Enter the value to add in list 2 or exit to terminate : ")
  if(num == 'exit'):
    break
  list2.append(int(num))

list3 = list1 + list2
list3.sort()
print(f"Smallest integer input is : {list3[0]}")
print(f"Largest integer input is : {list3[len(list3)-1]}")

"""#Lab task 3

"""

from math import sin, cos, pi
import numpy as np

def derivates(h):
    x = np.arange(-pi, pi, h)  # Create an array from -pi to pi with step h

    for value in x:
        derivative_approx = (sin(value + h) - sin(value)) / h  # Approximate derivative
        actual_derivative = cos(value)  # Exact derivative of sin(x) is cos(x)

        print(f"x: {value:.3f}, Approx Derivative: {derivative_approx:.5f}, Actual Derivative: {actual_derivative:.5f}")

print("For h = 0.01")
derivates(0.01)

print("\nFor h = 0.001")
derivates(0.001)

print("\nFor h = 0.1")
derivates(0.1)

"""#Lab task 4

"""

birthdayDictionary = {
    "Ahmed khan": "17/10/2005",
    "Ali hamza": "03/11/2001",
    "Hamid Sarfaraz": "02/05/2000"
}

print("Welcome to the Birthday Dictionary!")
print("We know the birthdays of:")
for name in birthdayDictionary.keys():
    print(f"{name}")

name = input("\nEnter the name you want to see the birthday: ")

birthday = birthdayDictionary.get(name)
if birthday:
    print(f"{birthday}")
else:
    print(f"Sorry, we don't have the birthday information for {name}.")

"""#Lab task 5

"""

sample_dict = {
    "name": "Kelly",
    "age": 25,
    "salary": 8000,
    "city": "New York"
}

keys = ["name", "salary"]

new_dict = {key: sample_dict[key] for key in keys}

print(new_dict)