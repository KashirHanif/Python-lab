# -*- coding: utf-8 -*-
"""lab-10.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WcqqRLHD_tgByvdIJagC7BjMHp_Zq5WM
"""

import random

# Parameters
L = 8                       # Length of the bit string
POPULATION_SIZE = 10        # Number of individuals in the population
MUTATION_RATE = 0.01        # Probability of flipping a bit
MAX_GENERATIONS = 1000      # Max number of generations to avoid infinite loops

def generate_individual():
    return [random.randint(0, 1) for _ in range(L)]

def fitness(individual):
    return sum(individual)  # The goal is to maximize the number of 1s

def mutate(individual):
    return [bit if random.random() > MUTATION_RATE else 1 - bit for bit in individual]

def crossover(parent1, parent2):
    point = random.randint(1, L - 1)
    return parent1[:point] + parent2[point:], parent2[:point] + parent1[point:]

def select(population):
    total_fitness = sum(fitness(ind) for ind in population)
    if total_fitness == 0:
        return random.choice(population)
    pick = random.uniform(0, total_fitness)
    current = 0
    for ind in population:
        current += fitness(ind)
        if current > pick:
            return ind

# Initialize population
population = [generate_individual() for _ in range(POPULATION_SIZE)]

# Evolution loop
for generation in range(MAX_GENERATIONS):
    population = sorted(population, key=fitness, reverse=True)

    if fitness(population[0]) == L:
        print(f"Solution found in generation {generation}: {population[0]}")
        break

    next_generation = population[:2]  # Elitism: carry over top 2 individuals

    while len(next_generation) < POPULATION_SIZE:
        parent1 = select(population)
        parent2 = select(population)
        child1, child2 = crossover(parent1, parent2)
        next_generation.extend([mutate(child1), mutate(child2)])

    population = next_generation[:POPULATION_SIZE]  # Trim to population size

else:
    print("Solution not found within generation limit.")